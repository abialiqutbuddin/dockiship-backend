name: Deploy DockiShip Backend (PM2) â€” git pull

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "**/*.md"
      - ".gitignore"
  workflow_dispatch:

concurrency:
  group: deploy-dockiship-backend
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy on VM via SSH (git pull + build + pm2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            APP_DIR="$HOME/dockiship-backend"
            BRANCH="main"
            NODE_VERSION="20"

            # Ensure repo dir exists (you said it already does)
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "Directory exists but not a git repo. Cloning fresh..."
              rm -rf "$APP_DIR"
              git clone --depth 1 --branch "$BRANCH" https://github.com/abialiqutbuddin/dockiship-backend "$APP_DIR"
            fi

            cd "$APP_DIR"

            # Make sure remote is set to public HTTPS (no keys needed)
            if ! git remote get-url origin | grep -q "github.com/abialiqutbuddin/dockiship-backend"; then
              git remote set-url origin https://github.com/abialiqutbuddin/dockiship-backend
            fi

            # Pull latest (safe hard reset to origin/main)
            git fetch --all --prune
            git checkout "$BRANCH"
            # Preserve .env then hard reset everything else
            if [ -f ".env" ]; then cp .env /tmp/.env.deploy.backup; fi
            git reset --hard "origin/$BRANCH"
            git clean -fdx
            if [ -f "/tmp/.env.deploy.backup" ]; then mv /tmp/.env.deploy.backup .env; fi

            # Load nvm and use Node 20
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install "$NODE_VERSION"
            nvm use "$NODE_VERSION"

            # Install deps, build, prune dev
            npm ci
            npm run build
            npm prune --omit=dev || true

            # Prisma (if present) or TypeORM
            if [ -d "prisma" ] && [ -f "node_modules/.bin/prisma" ]; then
              echo "Running Prisma migrations..."
              npx prisma migrate deploy
            elif npm run | grep -qE "typeorm:migrate"; then
              echo "Running TypeORM migrations via 'typeorm:migrate'..."
              npm run typeorm:migrate
            elif npm run | grep -qE "migration:run"; then
              echo "Running TypeORM migrations via 'migration:run'..."
              npm run migration:run
            else
              echo "No migration step detected. Skipping."
            fi

            # PM2 reload/start
            if [ -f "ecosystem.config.js" ]; then
              pm2 startOrReload ecosystem.config.js --update-env
            else
              pm2 start dist/main.js --name dockiship-backend || pm2 restart dockiship-backend
            fi
            pm2 save