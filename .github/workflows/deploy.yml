name: Deploy DockiShip Backend (PM2) â€” git pull (safe)

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "**/*.md"
      - ".gitignore"
  workflow_dispatch:

concurrency:
  group: deploy-dockiship-backend
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy on VM via SSH (git pull + build + pm2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            APP_DIR="$HOME/dockiship-backend"
            BRANCH="main"
            NODE_VERSION="20"

            # Ensure repo folder exists (clone if missing)
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "Cloning repo (fresh, non-destructive to home)..."
              rm -rf "$APP_DIR" || true
              git clone --depth 1 --branch "$BRANCH" \
                https://github.com/abialiqutbuddin/dockiship-backend "$APP_DIR"
            fi

            cd "$APP_DIR"

            # Make sure origin points to your public HTTPS remote
            if ! git remote get-url origin | grep -q "github.com/abialiqutbuddin/dockiship-backend"; then
              git remote set-url origin https://github.com/abialiqutbuddin/dockiship-backend
            fi

            # Pull latest without deleting untracked files (keeps .env, node_modules)
            git fetch origin "$BRANCH" --prune
            git checkout "$BRANCH"
            git pull --ff-only origin "$BRANCH"

            # Load nvm and select Node
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install "$NODE_VERSION"
            nvm use "$NODE_VERSION"

            # Prepare env for tools if present (kept in place)
            if [ -f ".env" ]; then
              set -a; . ./.env; set +a
            fi

            # Install deps without nuking node_modules:
            # - if node_modules exists, just add what's missing
            # - if it's absent (first run), do a clean install
            if [ -d node_modules ]; then
              npm install --no-audit --no-fund
            else
              npm ci --no-audit --no-fund
            fi

            # Generate Prisma client if applicable (safe no-op otherwise)
            npx prisma generate || true

            # Build without requiring global Nest CLI
            npx nest build || npx tsc -p tsconfig.build.json

            # (Optional) strip dev deps after build if you want a lighter runtime
            # npm prune --omit=dev || true

            # Run migrations
            if [ -d "prisma" ] && [ -f "node_modules/.bin/prisma" ]; then
              echo "Running Prisma migrations..."
              npx prisma migrate deploy
            elif npm run | grep -qE "typeorm:migrate"; then
              echo "Running TypeORM migrations via script 'typeorm:migrate'..."
              npm run typeorm:migrate
            elif npm run | grep -qE "migration:run"; then
              echo "Running TypeORM migrations via script 'migration:run'..."
              npm run migration:run
            else
              echo "No migration task found. Skipping."
            fi

            # PM2 start/reload
            if [ -f "ecosystem.config.js" ]; then
              pm2 startOrReload ecosystem.config.js --update-env
            else
              pm2 start dist/main.js --name dockiship-backend || pm2 restart dockiship-backend
            fi

            pm2 save