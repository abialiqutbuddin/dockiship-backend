{
  "info": {
    "_postman_id": "fc895e1e-1c15-4b28-b28b-2297eb3ff743",
    "name": "DockiShip Backend",
    "description": "Full RBAC + multi-tenant API test flow for DockiShip Backend (Option B: owner registers globally, then creates tenants). Includes globals + auto token/tenant capture.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "35038923"
  },
  "item": [
    {
      "name": "1) Owner Register (Global User Only)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Owner register 200/201', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
              "const res = pm.response.json() || {};",
              "// Save owner access token (global, not tenant-scoped yet)",
              "if (res.access_token) pm.globals.set('access_token', res.access_token);",
              "if (res.data && res.data.access_token) pm.globals.set('access_token', res.data.access_token);",
              "// Clear any old tenant-scoped values",
              "pm.globals.unset('tenant_id');",
              "pm.globals.unset('role_id');",
              "pm.globals.unset('member_user_id');"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"fullName\": \"Owner User\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/owner/register",
          "host": ["{{base_url}}"],
          "path": ["auth","owner","register"]
        }
      },
      "response": []
    },
    {
      "name": "2) Create Tenant (Authenticated Owner)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Create tenant 200/201', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
              "const res = pm.response.json() || {};",
              "const tId = res.tenantId || res.data?.tenantId;",
              "if (tId) pm.globals.set('tenant_id', tId);",
              "const slug = res.tenantSlug || res.data?.tenantSlug;",
              "if (slug) pm.globals.set('tenant_slug', slug);"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"tenantName\": \"Test Company\",\n  \"description\": \"Demo tenant\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/tenants",
          "host": ["{{base_url}}"],
          "path": ["tenants"]
        }
      },
      "response": []
    },
    {
      "name": "3) Owner Login (Tenant-scoped)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Owner login 200', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
              "const res = pm.response.json() || {};",
              "if (res.access_token) pm.globals.set('access_token', res.access_token);",
              "if (res.tenant && res.tenant.id) pm.globals.set('tenant_id', res.tenant.id);",
              "if (res.needTenantSelection && Array.isArray(res.ownedTenants) && res.ownedTenants.length > 0) {",
              "  pm.globals.set('tenant_id', res.ownedTenants[0].id);",
              "  console.warn('needTenantSelection: saved first owned tenant_id. Re-run Owner Login to get tenant-scoped token.');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/owner/login",
          "host": ["{{base_url}}"],
          "path": ["auth","owner","login"]
        }
      },
      "response": []
    },
    {
      "name": "4) Permissions: List All (Owner has access)",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}", "type": "text" }
        ],
        "url": {
          "raw": "{{base_url}}/permissions",
          "host": ["{{base_url}}"],
          "path": ["permissions"]
        }
      },
      "response": []
    },
    {
      "name": "5) Roles: Create (with permissionNames)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Role created 200/201', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
              "const res = pm.response.json() || {};",
              "const roleId = res.id || res.data?.id;",
              "if (roleId) pm.globals.set('role_id', roleId);"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"PurchasingLead\",\n  \"description\": \"Leads purchasing ops\",\n  \"permissionNames\": [\n    \"purchases.create\",\n    \"purchases.read\",\n    \"purchases.update\"\n  ]\n}"
        },
        "url": {
          "raw": "{{base_url}}/roles",
          "host": ["{{base_url}}"],
          "path": ["roles"]
        }
      },
      "response": []
    },
    {
      "name": "6) Roles: List",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}" }
        ],
        "url": {
          "raw": "{{base_url}}/roles",
          "host": ["{{base_url}}"],
          "path": ["roles"]
        }
      },
      "response": []
    },
    {
      "name": "7) Roles: Set Permissions (replace set)",
      "request": {
        "method": "PUT",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"permissionNames\": [\"purchases.create\", \"purchases.read\"]\n}"
        },
        "url": {
          "raw": "{{base_url}}/roles/{{role_id}}/permissions",
          "host": ["{{base_url}}"],
          "path": ["roles","{{role_id}}","permissions"]
        }
      },
      "response": []
    },
    {
      "name": "8) Users: Invite (Owner/Admin)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{member_email}}\",\n  \"fullName\": \"Member User\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/users/invite",
          "host": ["{{base_url}}"],
          "path": ["users","invite"]
        }
      },
      "response": []
    },
    {
      "name": "9) Users: List (search to capture member_user_id)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Users list 200', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
              "const res = pm.response.json() || {};",
              "const payload = res.data || res;",
              "const rows = payload?.data || payload || [];",
              "if (Array.isArray(rows) && rows.length > 0) {",
              "  const m = rows.find(r => r.email === pm.variables.get('member_email')) || rows[0];",
              "  if (m && m.id) pm.globals.set('member_user_id', m.id);",
              "} else {",
              "  console.warn('No users found for member_email search');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}" }
        ],
        "url": {
          "raw": "{{base_url}}/users?q={{member_email}}",
          "host": ["{{base_url}}"],
          "path": ["users"],
          "query": [
            { "key": "q", "value": "{{member_email}}" }
          ]
        }
      },
      "response": []
    },
    {
      "name": "10) Users: Assign Role to Member",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"roleIds\": [\"{{role_id}}\"]\n}"
        },
        "url": {
          "raw": "{{base_url}}/users/{{member_user_id}}/roles",
          "host": ["{{base_url}}"],
          "path": ["users","{{member_user_id}}","roles"]
        }
      },
      "response": []
    },
    {
      "name": "11) Member Login (Tenant-scoped)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Member login 200', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
              "const res = pm.response.json() || {};",
              "// Save member token separately if you like",
              "// if (res.access_token) pm.globals.set('member_access_token', res.access_token);"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{member_email}}\",\n  \"password\": \"{{member_password}}\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/member/login",
          "host": ["{{base_url}}"],
          "path": ["auth","member","login"]
        }
      },
      "response": []
    },
    {
      "name": "12) Delete Tenant (Owner only, HARD DELETE)",
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}", "type": "text" },
          { "key": "X-Tenant-ID", "value": "{{tenant_id}}", "type": "text" }
        ],
        "url": {
          "raw": "{{base_url}}/tenants/{{tenant_id}}",
          "host": ["{{base_url}}"],
          "path": ["tenants","{{tenant_id}}"]
        }
      },
      "response": []
    },
	{
    "name": "Auth: Request Password Reset",
    "event": [
      {
        "listen": "test",
        "script": {
          "type": "text/javascript",
          "exec": [
            "pm.test('Request reset 200/201', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));"
          ]
        }
      }
    ],
    "request": {
      "method": "POST",
      "header": [
        { "key": "Content-Type", "value": "application/json" }
      ],
      "body": {
        "mode": "raw",
        "raw": "{\n  \"email\": \"{{email}}\",\n  \"tenantId\": \"{{tenant_id}}\" // optional hint for frontend redirect\n}"
      },
      "url": {
        "raw": "{{base_url}}/auth/request-password-reset",
        "host": ["{{base_url}}"],
        "path": ["auth","request-password-reset"]
      }
    },
    "response": []
  },
  {
    "name": "Auth: Reset Password (complete)",
    "event": [
      {
        "listen": "test",
        "script": {
          "type": "text/javascript",
          "exec": [
            "pm.test('Reset password 200/201', () => pm.expect(pm.response.code).to.be.oneOf([200,201]));"
          ]
        }
      }
    ],
    "request": {
      "method": "POST",
      "header": [
        { "key": "Content-Type", "value": "application/json" }
      ],
      "body": {
        "mode": "raw",
        "raw": "{\n  \"token\": \"<paste-token-from-email-link>\",\n  \"newPassword\": \"NewPass123!\"\n}"
      },
      "url": {
        "raw": "{{base_url}}/auth/reset-password",
        "host": ["{{base_url}}"],
        "path": ["auth","reset-password"]
      }
    },
    "response": []
  }
  ],
  "variable": [
    { "key": "base_url", "value": "http://localhost:3000" },
    { "key": "email", "value": "abialigadi@gmail.com" },
    { "key": "password", "value": "supersecret" },
    { "key": "tenant_id", "value": "" },
    { "key": "tenant_slug", "value": "" },
    { "key": "access_token", "value": "" },
    { "key": "member_email", "value": "member@example.com" },
    { "key": "member_password", "value": "TempPass123!" },
    { "key": "member_user_id", "value": "" },
    { "key": "role_id", "value": "" }
  ]
}